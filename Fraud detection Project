
pip install pandas

pip install numpy matplotlib seaborn

import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")
sns.set(style="whitegrid")

df=pd.read_csv("AIML Dataset.csv")

df.head() 

df.info()

df["isFraud"].value_counts()

df["isFlaggedFraud"].value_counts()

df.isnull().sum().sum()

df.shape[0]

round((df["isFraud"].value_counts()[1] / df.shape[0])*100,2)

df["type"].value_counts().plot(kind='bar',title="Transaction Types ",color="skyblue")
plt.xlabel("Transaction Type")
plt.ylabel("Count")
plt.show()

fraud_by_type=df.groupby("type")["isFraud"].mean().sort_values(ascending=False)
fraud_by_type.plot(kind='bar', title="Fraud Rate by Transaction Type", color="lightcoral")
plt.ylabel("Fraud Rate")
plt.show()

df["amount"].describe().astype(int)

sns.histplot(df["amount"], bins=50, kde=True,color="purple")
plt.title("Transaction Amount Distribution (log scale)")
plt.xlabel("Log(Amount+1)")
plt.show()

sns.boxplot(data=df[df["amount"]<50000],x="isFraud",y="amount")
plt.title("Amount vs is Fraud (Filtered under 50k)")
plt.show()

df.columns

df["balanceDiffOrig"]=df["oldbalanceOrg"]-df["newbalanceOrig"]
df["balanceDiffDest"]=df["oldbalanceDest"]-df["newbalanceDest"]

(df["balanceDiffOrig"]<0).sum()

(df["balanceDiffDest"]<0).sum()

df.head(2)

frauds_per_step=df[df["isFraud"]==1]["step"].value_counts().sort_index()
plt.plot(frauds_per_step.index,frauds_per_step.values,label="Fraud per step")
plt.xlabel("Step (Time)")
plt.ylabel("Number of Frauds")
plt.title("Frauds Over Time")
plt.grid(True)
plt.show()

df.drop(columns="step",inplace=True)

df.head()

top_senders=df["nameOrig"].value_counts().head(10)

top_senders

top_receivers=df["nameDest"].value_counts().head(10)

fraud_users=df[df["isFraud"]==1]["nameOrig"].value_counts().head(10)

fraud_users

fraud_types=df[df["type"].isin(["TRANSFER","CASH_OUT"])] 

fraud_types["type"].value_counts()

sns.countplot(data=fraud_types,x="type",hue="isFraud")
plt.title("Fraud Distribution in Transfer & Cash Out")
plt.show()

corr=df[["amount","oldbalanceOrg","newbalanceOrig","oldbalanceDest","newbalanceDest","balanceDiffOrig","balanceDiffDest","isFraud"]].corr()

corr

sns.heatmap(corr,annot=True,cmap="coolwarm",fmt=".2f")
plt.title("Correlation Matrix")
plt.show()

zero_after_transfer=df[(df["oldbalanceOrg"]>0)&(df["newbalanceOrig"]==0)&(df["type"].isin(["TRANSFER","CASH_OUT"]))]

len(zero_after_transfer)

zero_after_transfer.head()

df["isFraud"].value_counts()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report,confusion_matrix,roc_auc_score
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder


pip install sklearn

df.head()

df_model=df.drop(["nameOrig","nameDest","isFlaggedFraud"],axis=1)

df_model.head()

catgorial=["type"]
numeric=["amount","oldbalanceorg","newbalanceOrig","oldbalanceDest","newbalanceDest","balanceDiffOrig","balanceDiffDest"]

y=df_model["isFraud"]
x=df_model.drop("isFraud",axis=1)

X_train,X_test,y_train=train_test_split(X,y,test_size=0.3,stratify=y)

preprocessor=ColumnTransformer(
    transformers=[
        ("num",StandardScaler(),numeric),
        ("cat",OneHotEncoder(drop="first"),categorical)
    ],
    remainder="drop"
)

pipeline=Pipeline([
    ("prep",preprocessor),
    ("clf",LogisticRegression(class_weight="balanced",max_iter=1000))
])

pipeline.fit(X_train,y_train)

pip install pandas numpy matplotlib seaborn scikit-
